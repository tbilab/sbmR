% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/new_sbm_network.R
\name{new_sbm_network}
\alias{new_sbm_network}
\title{Builds a new sbm_network object from data}
\usage{
new_sbm_network(
  edges = dplyr::tibble(),
  nodes = NULL,
  edges_from_column = from,
  edges_to_column = to,
  bipartite_edges = FALSE,
  setup_model = TRUE,
  default_node_type = "node",
  show_warnings = interactive()
)
}
\arguments{
\item{edges}{Dataframe with a from and two column encoding edges between
string node ids (direction does not matter).}

\item{nodes}{Optional dataframe that links a node \code{id} to its \code{type}, for
when model is polypartite.}

\item{edges_from_column}{Name of the from column for edges}

\item{edges_to_column}{Name of the to column for edges}

\item{bipartite_edges}{Do the passed edges reflect a bipartite struture? I.e.
are nodes in from \code{from} column of a different type to those in the \code{to}
column?}

\item{setup_model}{Should an SBM model object be added? Set to \code{FALSE} if
network is just being visualized or described.}

\item{default_node_type}{What should nodes that the type is generated for be
called?}

\item{show_warnings}{Do you want to be warned when minor problems are
detected by function? Usefull to disable when not running in an interactive
mode etc.}
}
\value{
An S3 object of class \code{sbm_network}. For details see
\link{new_sbm_network} section "Class structure."
}
\description{
Constructs an object with the \code{sbm_network} class. Takes as input at a
minumum an edge dataframe and will also accept a nodes dataframe that can
contain addition information about the nodes in the network. A helper for
allowing bipartite structure is provided which will treat either side of
passed edges dataframe as two different types of nodes.
}
\section{Class structure}{


The \code{sbm_network} class is an S3 class with two minimum components:

\describe{ \item{\verb{$edges}}{Edges that the network is built out of. This is
simply the passed \code{edges} input to the function.} \item{\verb{$nodes}}{Nodes
that the edges connect. This is either the passed \code{nodes} input or is
created from the \code{edges} input automatically by listing the unique node ids
seen in the edges.} }

If the method \code{\link{mcmc_sweep}} has been run on the \code{sbm_network}
object then a \verb{$sweep_result} slot will be added. For more info see
\code{\link{mcmc_sweep}}.

If either of the methods \code{\link{collapse_groups}} or
\code{\link{collapse_run}} have been applied to the \code{sbm_network} object
then the slot \verb{$collapse_result} will be append.

A few attributes are contained by the class as well:

\describe{ \item{\code{n_nodes}}{Number of unique nodes in the current model.
Equivalent to \code{nrow(sbm_network$nodes)}.} \item{\code{n_edges}}{Number of edges
in the current model. Equivalent to \code{nrow(sbm_network$edges)}.}
\item{\code{from_column}}{Raw quosure representing the \code{edges_from_column}
argument. This is kept so bipartite network types can be inferred and no
modification of the passed \code{edges} dataframe needs to take place.}
\item{\code{to_column}}{Same as \code{from_column}} \item{\code{model}}{ S4 class that is
exported by the C++ code used to implement all the modeling algorithms.
Most of the time the user should not have to interact with this object and
thus it can be ignored.} }
}

\examples{

# Build small object from simple edge dataframe
edges <- dplyr::tribble(
  ~a_node, ~b_node,
  "a1"   , "b1"   ,
  "a1"   , "b2"   ,
  "a1"   , "b3"   ,
  "a2"   , "b1"   ,
  "a2"   , "b4"   ,
  "a3"   , "b1"
)

new_sbm_network(edges, edges_from_column = a_node, edges_to_column = b_node)

# Builds network from nodes and edges
nodes <- dplyr::tribble(
  ~id, ~type,
  "a1", "node",
  "a2", "node",
  "a3", "node",
  "b1", "node",
  "b2", "node",
  "b3", "node",
  "b4", "node"
)

new_sbm_network(edges = edges,
                nodes = nodes,
                edges_from_column = a_node,
                edges_to_column = b_node)

# Can build a bipartite network just from an edge list
new_sbm_network(edges, bipartite_edges = TRUE,
                edges_from_column = a_node,
                edges_to_column = b_node)

# Or if adding a node dataframe as well, arbitrary polypartite structure is possible
edges_tripartite <- dplyr::tribble(
  ~from,    ~to,
     "a1", "b1",
     "a1", "b2",
     "a2", "b1",
     "b1", "c1",
     "b2", "c1",
     "b2", "c2"
)

nodes_tripartite <- dplyr::tribble(
  ~id, ~type,
  "a1", "a",
  "a2", "a",
  "b1", "b",
  "b2", "b",
  "c1", "c",
  "c2", "c"
)

new_sbm_network(edges = edges_tripartite,
                nodes = nodes_tripartite)

}
\seealso{
Other model_setup: 
\code{\link{load_sbm_network}()},
\code{\link{save_sbm_network}()}
}
\concept{model_setup}
