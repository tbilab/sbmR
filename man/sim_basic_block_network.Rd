% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sim_basic_block_network.R
\name{sim_basic_block_network}
\alias{sim_basic_block_network}
\title{Simulate stochastic block model of given number of blocks}
\usage{
sim_basic_block_network(
  n_blocks = 2,
  n_nodes_per_block = 5,
  propensity_drawer = function(n) {     sample(seq(rbeta(1, 1, 5), rbeta(1, 5, 1),
    length.out = n)) },
  edge_dist = purrr::rbernoulli,
  allow_self_edges = FALSE,
  keep_edge_counts = FALSE,
  return_edge_propensities = FALSE,
  setup_model = FALSE
)
}
\arguments{
\item{n_blocks}{How many blocks to simulate}

\item{n_nodes_per_block}{How many nodes in each block}

\item{propensity_drawer}{Function that takes a single size argumenet and
returns a vector of edge propensities of specified size. Default
draws propensity from \code{n} evenly spaced values in the 0-1 range.}

\item{edge_dist}{A distribution function that has two inputs: the first is
number of samples to draw and the second the \code{propensity} value from
\code{edge_propensities}. For instance, the default value is \code{rpois} which
takes two arguments: \code{n} and \code{lambda}. In this scenario the \code{propensity} of
edges between two nodes is provided to \code{lambda} and thus is the
average number of edges for each pair of nodes between two given
blocks.}

\item{allow_self_edges}{Should nodes be allowed to have edges to
themselves?}

\item{keep_edge_counts}{Should the edge counts stay on returned
edges? If edges distribution is a binary yes or no then you will likely
want to set this to \code{TRUE}.}

\item{return_edge_propensities}{If set to \code{TRUE} the returned list will
also include the simulated edge propensities dataframe. This can be
used for recreating draws using \code{\link{sim_sbm_network()}}.}

\item{setup_model}{Should an SBM model object be added? Set to \code{FALSE} if
network is just being visualized or described.}
}
\value{
An S3 object of class \code{sbm_network}. For details see
\link{new_sbm_network} section "Class structure."
}
\description{
Simulates a simple block structured network with a desired number of constant
sized blocks. The probability of edges between given blocks will be
drawn from a passed function that must return a numeric value that will be
used as the propensity parameter for drawing edge counts from a node pair.
The default values will draw propensity values for bernouli edges with an
average of a 50\% chance of edge.
}
\details{
If \code{return_edge_propensities == TRUE}: an \verb{$edge_propensities} slot is added
to the returned \code{sbm_network} object containing a dataframe that shows the
randomly drawn edge propensities between blocks.
}
\examples{

sim_basic_block_network(n_blocks = 4, n_nodes_per_block = 40)

sim_basic_block_network(n_blocks = 8, n_nodes_per_block = 20)

# Can save the generating edge propensities as well
net <- sim_basic_block_network(n_blocks = 4, n_nodes_per_block = 20, return_edge_propensities = TRUE)
net$edge_propensities


right_skewed_beta <- function(n) rbeta(n, 1, 5)

# Distribution that draws propensities can be customized
net <- sim_basic_block_network(n_blocks = 4,
                               n_nodes_per_block = 20,
                               return_edge_propensities = TRUE,
                               propensity_drawer = right_skewed_beta)
net$edge_propensities

}
\seealso{
\code{\link{sim_sbm_network}} \code{\link{sim_random_network}}

Other simulations: 
\code{\link{sim_random_network}()},
\code{\link{sim_sbm_network}()}
}
\concept{simulations}
